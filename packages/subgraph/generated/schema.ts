// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SpatialAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SpatialAsset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SpatialAsset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SpatialAsset", id.toString(), this);
  }

  static load(id: string): SpatialAsset | null {
    return store.get("SpatialAsset", id) as SpatialAsset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get storage(): Bytes {
    let value = this.get("storage");
    return value.toBytes();
  }

  set storage(value: Bytes) {
    this.set("storage", Value.fromBytes(value));
  }

  get parents(): Array<string> | null {
    let value = this.get("parents");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set parents(value: Array<string> | null) {
    if (value === null) {
      this.unset("parents");
    } else {
      this.set("parents", Value.fromStringArray(value as Array<string>));
    }
  }

  get children(): Array<string> | null {
    let value = this.get("children");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set children(value: Array<string> | null) {
    if (value === null) {
      this.unset("children");
    } else {
      this.set("children", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Node extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Node entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Node entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Node", id.toString(), this);
  }

  static load(id: string): Node | null {
    return store.get("Node", id) as Node | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get spatialAsset(): string {
    let value = this.get("spatialAsset");
    return value.toString();
  }

  set spatialAsset(value: string) {
    this.set("spatialAsset", Value.fromString(value));
  }
}
