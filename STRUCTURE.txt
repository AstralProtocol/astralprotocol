.
├── LICENSE-MIT
├── LICENSE.md
├── README.md
├── STRUCTURE.txt
├── bun.lockb
├── foundry.toml
├── legacy                                   // Should probably delete this no?
│   ├── LICENSE-APACHE                       // Should probably delete this no?
│   ├── README.md                            // Should probably delete this no?
│   ├── lerna.json                           // Should probably delete this no?
│   ├── package.json                         // Should probably delete this no?
│   ├── packages                             // Should probably delete this no?
|   ...                                  
├── location-proof-protocol.md
├── node_modules                             // Best practice to .gitignore this no? 
|   ...                                      // Best practice to .gitignore this no? 
├── package.json
├── remappings.txt
├── script                                   // This is specific to forge, right? How do we handle multiple contributions from different recipe developers?
│   ├── Base.s.sol                           // This is specific to forge, right? How do we handle multiple contributions from different recipe developers?
│   └── Deploy.s.sol                         // This is specific to forge, right? How do we handle multiple contributions from different recipe developers?
├── src
│   ├── contracts
│   │   ├── utils                            // or `tools`
│   │   |   ├── README.md
│   │   │   ├── Spatial.sol
│   │   │   ├── Trigonometry.sol
│   │   │   └── Coordinates.sol
│   │   ├── spatial-registry
│   │   │   ├── README.md                    // Explains the purpose of the SpatialRegistry contracts, how to use them, where they're deployed etc.
│   │   │   ├── RegistryFactory.sol
│   │   │   └── SpatialRegistry.sol
│   │   ├── location-proof-protocol
│   │   │   ├── README.md                   // Intention is to create a client SDK, but until we do, the offchain code lives here
│   │   │   ├── recipes
|   │   │   │   ├── RECIPES.md
|   │   │   │   ├── CONTRIBUTING.md
|   │   │   │   ├── recipe-id-1
|   │   │   │   |    ├── README.md          // Defines shape + content of the `recipe` bytes
|   │   │   │   |    ├── RecipeId1.sol      // Implementation contract with `verify` method
|   │   │   │   |    ├── offchain-peripherals
|   |   │   │   │    |    └── recipe-id-1.ts     // Offchain library to create, revoke and verify location proofs according to Recipe ID 1. (This should probably not be in the `contracts/` directory!?)
|   │   │   │   ├── recipe-id-2
|   │   │   │   |    ├── README.md
|   │   │   │   |    ├── RecipeId2.sol      // Implementation contract with `verify` method
|   │   │   │   |    ├── offchain-peripherals
|   │   │   │   |    |    └── recipe-id-2.py     // Client library to create, revoke and verify location proofs according to Recipe ID 2. (This should probably not be in the `contracts/` directory!?)
|   │   │   │   ├── ...                     // Anyone can open a pull request and submit a new recipe.
│   │   │   ├── media
|   │   │   │   ├── README.md               // Not quite sure how to support adding different media types.
|   │   │   │   ├── ???                     // Does this require anything onchain? Or just in client libraries? 
│   │   │   ├── schema                      // or `core`?
|   │   │   │   ├── README.md               // Describes schema structure
|   │   │   │   ├── Resolver.md             // Describes schema structure
|   │   │   │   └── EASLocationProof.s.sol  // Deploys schema according to structure
│   │   │   ├── locations                   // or `core`?
|   │   │   │   ├── README.md               // Defines `locationType`s 
|   │   │   │   └── Location.sol            // Describes schema structure
|   |   |   |    ...                 
│   └── interface
│       ├── ICoordinates.sol                // ??
│       ├── IRegistryFactory.sol
│       └── ISpatialRegistry.sol
├── test
│   ├── RegistryFactory.t.sol
│   ├── Spatial.t.sol
│   └── SpatialRegistry.t.sol
└── yarn.lock

331 directories, 3746 files